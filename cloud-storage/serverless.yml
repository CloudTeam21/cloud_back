service: cloud-storage
frameworkVersion: "3"

provider:
  name: aws
  runtime: python3.9
  stage: dev
  region: eu-central-1
  memorySize: 128
  timeout: 10
  environment:
    TABLE_NAME:
      Ref: filesTable
    BUCKET_NAME:
      Ref: filesBucket
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        - "Fn::GetAtt": [filesTable, Arn]
    - Effect: Allow
      Action:
        - "s3:GetObject"
        - "s3:PutObject"
        - "s3:DeleteObject"
        - "s3:ListBucket"
      Resource:
        - "arn:aws:s3:::kiriku-bucket-files/*"
        - "arn:aws:s3:::kiriku-bucket-files"
    - Effect: Allow
      Action:
        - cognito-idp:AdminGetUser
      Resource:
        - "arn:aws:cognito-idp:eu-central-1:235779924705:userpool/eu-central-1_GWyc5yETX"

# Packaging global configuration
package:
  # Create separate zip for each Lambda function
  individually: true
  patterns:
    # Exclude everything (each Lambda will specify which directory should be included)
    # To exclude use '!' prefix
    - "!**/**"
    # Include utility directory for every Lambda function
    - "utility/**"

functions:
  uploadFile:
    handler: uploadFile/upload_file.upload
    package:
      # Include 'uploadFile' directory and all child directories
      include: "uploadFile/**"
    # Specifies events that trigger the Lambda function
    events:
      # REST API endpoint of API Gateway
      - http:
          # Path for this endpoint
          path: file
          # HTTP method for this endpoint
          method: post
          # Enable CORS. Don't forget to return the right header in your response
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: DataHiveApiGatewayAuthorizer
  getFiles:
    handler: getFiles/get_files.get_files
    package:
      # Include 'uploadFile' directory and all child directories
      include: "getFiles/**"
    # Specifies events that trigger the Lambda function
    events:
      # REST API endpoint of API Gateway
      - http:
          # Path for this endpoint
          path: files/{album}
          # HTTP method for this endpoint
          method: get
          # Enable CORS. Don't forget to return the right header in your response
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: DataHiveApiGatewayAuthorizer
  shareFile:
    handler: shareFile/share_file.shareFile
    package:
      # Include 'shareFile' directory and all child directories
      include: "shareFile/**"
    # Specifies events that trigger the Lambda function
    events:
      # REST API endpoint of API Gateway
      - http:
          # Path for this endpoint
          path: file/share
          # HTTP method for this endpoint
          method: post
          # Enable CORS. Don't forget to return the right header in your response
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: DataHiveApiGatewayAuthorizer
<<<<<<< Updated upstream
  createAlbum:
    handler: createAlbum/create_album.create_album
    package:
      # Include 'uploadFile' directory and all child directories
      include: "createAlbum/**"
    # Specifies events that trigger the Lambda function
    events:
      # REST API endpoint of API Gateway
      - http:
          # Path for this endpoint
          path: album
          path: file/share
          # HTTP method for this endpoint
          method: post
          # Enable CORS. Don't forget to return the right header in your response
=======
  shareFolder:
    handler: shareFolder/share_folder.shareFolder
    package:
      include: "shareFolder/**"
    events:
      - http:
          path: folder/share
          method: post
>>>>>>> Stashed changes
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: DataHiveApiGatewayAuthorizer
<<<<<<< Updated upstream
  deleteAlbum:
    handler: deleteAlbum/delete_album.delete_album
    package:
      # Include 'uploadFile' directory and all child directories
      include: "deleteAlbum/**"
    # Specifies events that trigger the Lambda function
    events:
      # REST API endpoint of API Gateway
      - http:
          # Path for this endpoint
          path: album/{album}
          # HTTP method for this endpoint
          method: delete
          # Enable CORS. Don't forget to return the right header in your response
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: DataHiveApiGatewayAuthorizer
  getAlbums:
    handler: getAlbums/get_albums.get_albums
    package:
      # Include 'uploadFile' directory and all child directories
      include: "getAlbums/**"
    # Specifies events that trigger the Lambda function
    events:
      # REST API endpoint of API Gateway
      - http:
          # Path for this endpoint
          path: album/{album}
          # HTTP method for this endpoint
          method: get
          # Enable CORS. Don't forget to return the right header in your response
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: DataHiveApiGatewayAuthorizer

=======
              
>>>>>>> Stashed changes
resources:
  Resources:
    filesTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: serverlessFilesTable
        AttributeDefinitions:
          - AttributeName: file
            AttributeType: S
        KeySchema:
          - AttributeName: file
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    filesBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: kiriku-bucket-files
    DataHiveCognitoUserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: registered-users
        AutoVerifiedAttributes:
          - "email"
        EmailConfiguration: 
                EmailSendingAccount: COGNITO_DEFAULT
    DataHiveCognitoUserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: DataHive
        GenerateSecret: false
        UserPoolId:
          Ref: "DataHiveCognitoUserPool"
    DataHiveApiGatewayAuthorizer:
      Type: AWS::ApiGateway::Authorizer
      Properties:
        Name: DataHive
        RestApiId:
          Ref: ApiGatewayRestApi
        Type: COGNITO_USER_POOLS
        ProviderARNs:
          - Fn::GetAtt: [DataHiveCognitoUserPool, Arn]
        IdentitySource: method.request.header.Authorization
